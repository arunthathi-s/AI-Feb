# -*- coding: utf-8 -*-
"""Assignment5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18lhbF8NuBcJ0Cu5jTz7fRCPDFeyQa5a_
"""

import sys
import scipy
import numpy
import matplotlib
import pandas
import sklearn

from pandas.plotting import scatter_matrix
from pandas import read_csv
from matplotlib import pyplot
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn import model_selection
from sklearn.ensemble import VotingClassifier

data=read_csv('Iris.csv')

print(data.shape)
print(data.head(5))

data1=data.values
x=data1[:,0:4]
y=data1[:,5]
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=1)

models=[]
models.append(('LR',LogisticRegression(solver='liblinear',multi_class='ovr')))
models.append(('LDA',LinearDiscriminantAnalysis()))
models.append(('KNN',KNeighborsClassifier()))
models.append(('NB',GaussianNB()))
models.append(('SVM',SVC(gamma='auto')))

results = []
names = []

# Make sure x_train and y_train are already defined somewhere
for name, model in models:
    # Define StratifiedKFold with shuffle and random_state for reproducibility
    kfold = StratifiedKFold(n_splits=10, shuffle=True, random_state=3)

    # Perform cross-validation
    cv_results = cross_val_score(model, x_train, y_train, cv=kfold, scoring='accuracy')

    # Store results and model names
    results.append(cv_results)
    names.append(name)

    # Print the model's mean accuracy and standard deviation
    print('%s: %f (%f)' % (name, cv_results.mean(), cv_results.std()))

model=SVC(gamma='auto')
model.fit(x_train,y_train)
predictions=model.predict(x_test)
print(accuracy_score(y_test,predictions))
print(confusion_matrix(y_test,predictions))
print(classification_report(y_test,predictions))

model=KNeighborsClassifier()
model.fit(x_train,y_train)
predictions=model.predict(x_test)
print(accuracy_score(y_test,predictions))
print(confusion_matrix(y_test,predictions))
print(classification_report(y_test,predictions))